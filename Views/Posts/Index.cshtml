@using System.Security.Claims
@model Remood_Place.ViewModel.HomeViewModel

@{
    Layout = "_headerfooter";
}
<!DOCTYPE html>
<html lang="zxx">

<head>
    <meta charset="UTF-8">
    <meta name="description" content="Ogani Template">
    <meta name="keywords" content="Ogani, unica, creative, html">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    @* <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Oswald:300,400|Roboto|Open+Sans:300,400,700">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="/offernew/style.css"> *@
    <!-- Google Font -->
    <link href="https://fonts.googleapis.com/css2?family=Cairo:wght@200;300;400;600;900&display=swap" rel="stylesheet">

    <!-- Css Styles -->
    <link rel="stylesheet" href="offers/css/bootstrap.min.css" type="text/css">
    <link rel="stylesheet" href="offers/css/font-awesome.min.css" type="text/css">
    <link rel="stylesheet" href="offers/css/elegant-icons.css" type="text/css">
    <link rel="stylesheet" href="offers/css/nice-select.css" type="text/css">
    <link rel="stylesheet" href="offers/css/jquery-ui.min.css" type="text/css">
    <link rel="stylesheet" href="offers/css/owl.carousel.min.css" type="text/css">
    <link rel="stylesheet" href="offers/css/slicknav.min.css" type="text/css">
    <link rel="stylesheet" href="offers/css/style.css" type="text/css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="card/card.css">
    <style>
        /* .packageBody {
            background-image: url('/createpac/cc.jpg');
            background-repeat: no-repeat;
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
            width: 100%; /* عرض 100% من نافذة العرض */
            height: 100%; /* ارتفاع 100% من نافذة العرض */
        } */
        .form-control.col-12.w-100 {
            width: 100%;
        }

        .button_back {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: #4747debf;
            border: none;
            font-weight: 600;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0px 0px 0px 4px rgba(180, 160, 255, 0.253);
            cursor: pointer;
            transition-duration: 0.3s;
            overflow: hidden;
        }

        .svgIcon {
            transition-duration: 0.3s;
        }

            .svgIcon path {
                fill: white;
            }

        .button_back:hover {
            width: 140px;
            border-radius: 50px;
            transition-duration: 0.3s;
            background-color: rgb(249 0 0 / 79%);
            align-items: center;
        }

            .button_back:hover .svgIcon {
                /* width: 20px; */
                transition-duration: 0.3s;
                transform: translateY(-200%);
            }

        .button_back::before {
            position: absolute;
            bottom: -20px;
            content: "Create Post";
            color: white;
            /* transition-duration: .3s; */
            font-size: 0px;
        }

        .button_back:hover::before {
            font-size: 13px;
            opacity: 1;
            bottom: unset;
            /* transform: translateY(-30px); */
            transition-duration: 0.3s;
        }
        .discount-banner {
            z-index: 1; /* Ensure it's above the image */
            padding: 5px; /* Adjust padding as needed */
        }

            .discount-banner .badge {
                font-size: 14px; /* Adjust font size as needed */
            }

        .custom-scrollbar::-webkit-scrollbar {
            width: 8px;
        }

        .custom-scrollbar::-webkit-scrollbar-track {
            background-color: #343a40;
        }

        .custom-scrollbar::-webkit-scrollbar-thumb {
            background-color: #6c757d;
            border-radius: 3px;
            border: 1px solid #343a40;
        }

            .custom-scrollbar::-webkit-scrollbar-thumb:hover {
                background-color: #555;
            }

        .card-container {
            perspective: 700px;
        }

        .card-flip {
            position: relative;
            width: 100%;
            transform-style: preserve-3d;
            height: auto;
            transition: all 0.5s ease-out;
            background: white;
            border: none;
        }

            .card-flip div {
                backface-visibility: hidden;
                transform-style: preserve-3d;
                height: 100%;
                width: 100%;
                border: none;
            }

        .front {
            position: relative;
            z-index: 1;
        }

        .back {
            position: relative;
            z-index: 0;
            transform: rotateY(-180deg);
        }

        .card-container:hover .card-flip {
            transform: rotateY(180deg);
        }

        .o_name {
            position: relative;
            border: 1px solid #ff000085;
            outline: none;
            background-color: transparent;
            padding: 15px 30px;
            border-radius: 30px;
            z-index: 2;
            cursor: pointer;
            color: #ffff;
            overflow: hidden;
            text-align: center;
            font-size: 20px;
            font-weight: 800;
            font-family: "Franklin Gothic Medium", "Arial Narrow", Arial, sans-serif;
        }

            .o_name::before {
                content: "";
                position: absolute;
                top: 20%;
                left: 20%;
                transform: translate(-50%, -50%);
                width: 40px;
                height: 40px;
                background-color: #ff480091;
                filter: blur(5px);
                z-index: -1;
                transition: width 0.9s ease-out, height 0.9s ease-out, background-color 0.3s ease-out;
                border-radius: 50%;
            }

            .o_name:hover::before {
                border-radius: 20px;
                width: 300px;
                height: 200px;
                background-color: #ff7b00a1;
            }

        #IMG {
            transition: transform 1s ease;
            border-radius: 3px;
        }

            #IMG:hover {
                transform: scale(1.05);
            }

        .animated-header {
            animation: slideIn 1s forwards;
        }
    </style>
</head>

<body class="m-0 p-0 packageBody">
    <div class="d-md-flex">
        <!-- Left side of the layout -->
        <div class="container-fluid col-lg-3 d-none d-md-block" @* style="background-color: #e4e6eb;" *@>
            <!-- Right sidebar content -->
            <div class="container rounded custom-scrollbar" style=" height: 100vh; overflow-y: auto; position: sticky; top: 0;">
                <div class="container-fluid d-flex justify-content-center border rounded">
                    <h3 class="text-center mb-4 mt-4" style="font-weight: bold; font-family: 'Arial Black', Arial, sans-serif; color: black; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);">OFFERS</h3>
                </div>
                <div>
                    @foreach (var item in Model.Offers)
                    {
                       
                        <div class="container mb-3 position-relative">
                            <div class="card-container">
                                <img class="card-img" style="height: 200px; width: 100%; border-top-left-radius:25px ; border-bottom-right-radius:25px;" src="@item.ImagePaths[0]" alt="a snow-capped mountain range">                                <div class="card-img-overlay text-white">
                                    <div class="discount-banner position-absolute top-0 start-0 translate-middle">
                                        <span class="badge bg-danger">-@item.DiscountPercentage%</span>
                                    </div>
                                    <br /><br /><br /><br /><br />
                                    <a class="btn btn-primary translate-middle-x" asp-controller="posts" asp-action="Details" asp-route-id="@item.Id">Learn more</a>
                                </div>
                            </div>
                        </div>

                        <hr>
                    }

                </div>
            </div>
        </div>
        <!-- Main content -->
        <div class="col-md-6 col-lg-6 d-flex" @* style="background-color:#e4e6eb" *@>
            <div id="packages" class="container col-12">
                <form method="post" asp-action="FilterCategoryVibs" asp-controller="posts" class="text-center my-2">
                    <div class="form-row align-items-center justify-content-center">
                        <div class="col-4">
                            <select id="category" name="category" class="form-control">
                                <option value="">All Categories</option>
                                @{
                                    foreach (var category in Enum.GetValues(typeof(Category)))
                                    {
                                        <option value="@((byte)category)" class="text-dark">@category</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-4">
                            <select id="vibs" name="vibs" class="form-control">
                                <option value="">All Vibs</option>
                                @{
                                    foreach (var vibs in Enum.GetValues(typeof(Vibs)))
                                    {
                                        <option value="@((byte)vibs)" class="text-dark">@vibs</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-2">
                            <button type="submit" class="btn btn-primary">Apply</button>
                        </div>
                    </div>
                </form>



                <div class="centered">
                    <div class="container">
                        @foreach (var item in Model.AllPosts)
                        {
                            <input type="hidden" id="postId" value="@item.Id" />
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="card mt-4" style="border-radius:20px;">
                                        <!-- Image Carousel -->
                                        <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
                                            <ol class="carousel-indicators">
                                                @for (var i = 0; i < item.ImagePaths.Count; i++)
                                                {
                                                    <li data-target="#carouselExampleIndicators" data-slide-to="@i" class="@(i==0 ? "active" : "")"></li>
                                                }
                                            </ol>
                                            <div class="carousel-inner">
                                                @for (var i = 0; i < item.ImagePaths.Count; i++)
                                                {
                                                    <div class="carousel-item @(i == 0 ? "active" : "")">
                                                        <img src="@item.ImagePaths[i]" id="IMG" class="d-block w-100" style="height:500px;width:500px;border-top-right-radius:20px; border-top-left-radius:20px;" alt="Image @(i + 1)">
                                                    </div>
                                                }
                                            </div>
                                            <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
                                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                                <span class="sr-only">Previous</span>
                                            </a>
                                            <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
                                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                                <span class="sr-only">Next</span>
                                            </a>
                                        </div>

                                        <!-- Card Body -->
                                        <div class="card-body">
                                            <div class="card-title d-flex justify-content-between align-items-center">
                                                <h2>@item.Name</h2>
                                                @if (User.IsInRole("User"))
                                                {
                                                    // Check if the current post is in the user's favorite posts
                                                    bool isFavorite = Model.UserFavoritePosts.Any(p => p.Id == item.Id);
                                                    if (isFavorite)
                                                    {
                                                        <button type="button" class="btn btn-outline-danger remove-from-favorites" data-postid="@item.Id">Remove from Favorites</button>
                                                    }
                                                    else
                                                    {
                                                        <button type="button" class="btn btn-outline-primary add-to-favorites" data-postid="@item.Id">Add to Favorites</button>
                                                    }
                                                }
                                            </div>

                                            <hr>
                                            <p class="card-text">@item.Bio</p>
                                        </div>
                                        <!-- Buttons -->
                                        @if (User.IsInRole("User"))
                                        {
                                            <div class="card-footer flex-wrap d-flex justify-content-between align-items-center">
                                                <button type="button" class="card_btns-comment mr-2 btn-sm mr-2 toggle-comment" data-postid="@item.Id">Comments @item.Comments.Count()</button>
                                                @{
                                                    // Check if the current post is in the user's liked posts
                                                    bool isLiked = Model.UserLikePosts.Any(p => p.Id == item.Id);
                                                    int likeCount = item.Likes.Count(); // Get the current count of likes
                                                }

                                                <button type="button" class=" @if (isLiked) {<text>card_btns-fav</text>} else {<text>card_btns-comment</text>} mr-2 btn-sm mr-2 @if (isLiked) {<text>remove-from-Likes</text>} else {<text>add-to-Likes</text>}" data-postid="@item.Id">
                                                    @if (isLiked)
                                                    {
                                                        <span>Liked @likeCount</span>
                                                    }
                                                    else
                                                    {
                                                        <span>Like @likeCount</span>
                                                    }
                                                </button>
                                                <button type="button" @* style="height: 30px;" *@ class="card_btns-comment btn-sm mr-2">
                                                    <a style="text-decoration :none" asp-controller="Posts" asp-action="Details" asp-route-id="@item.Id">See more</a>
                                                </button>
                                                <!-- Comment Input Field (Initially Hidden) -->
                                                <div class="form-group d-none mt-3" id="commentInput_@item.Id" style="width: 100%;">
                                                    <input type="text" class="form-control" name="commentText" placeholder="Your comment" style="width: 100%;">
                                                    <button type="button" class="btn btn-primary mt-2 submit-comment" data-postid="@item.Id" style="width: 100%;">Add</button>
                                                    <!-- Existing comments -->
                                                    <div id="AddComment_@item.Id"></div>
                                                    <div class="existing-comments mt-3" id="comments_@item.Id" style="width: 100%;">
                                                        @foreach (var c in item.Comments)
                                                        {
                                                            <div id="Delete-card" class="card mt-2" style="width: 100%;">
                                                                <div class="card-body">
                                                                    <div class="comment-text">
                                                                        @c.Commentt
                                                                    </div>
                                                                    @if (User.Identity.IsAuthenticated && c.UserId == User.FindFirstValue(ClaimTypes.NameIdentifier))
                                                                    {
                                                                        <div class="comment-buttons mt-3 d-flex justify-content-end">
                                                                            <button type="button" class="btn btn-sm btn-primary mr-2 edit-comment" data-commentid="@c.Id">Edit</button>
                                                                            <button type="button" class="btn btn-sm btn-danger delete-comment" data-commentid="@c.Id">Delete</button>
                                                                        </div>
                                                                    }
                                                                </div>
                                                            </div>

                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        }else
                                        {
@*                                             <button type="button"  class="card_btns-comment btn-sm mr-2 col-12">
                                                <a style="text-decoration :none" asp-controller="Posts" asp-action="Details" asp-route-id="@item.Id">See more</a>
                                            </button> *@
                                            <form class="col-12" action="@Url.Action("Details", "Posts")" method="get">
                                                <input type="hidden" name="id" value="@item.Id" />
                                                <button type="submit" class="col-12 btn btn-warning" id="btn_package">
                                                    See More..
                                                </button>
                                            </form>
                                        }
                                    </div>
                                </div>
                           </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Right side of the layout -->
        <div class="container-fluid col-lg-3 d-none d-md-block" @* style="background-color: #e4e6eb;" *@>
            <!-- Right sidebar content -->
            <div class="container rounded custom-scrollbar" style=" height: 100vh; overflow-y: auto; position: sticky; top: 0;">
                <div class="container-fluid d-flex justify-content-center border rounded">
                    <h3 class="text-center mb-4 mt-4" style="font-weight: bold; font-family: 'Arial Black', Arial, sans-serif; color: black; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);">Selected For You</h3>
                </div>
                <div>
                    @foreach (var item in Model.Ads)
                    {
                        <div class="container mb-3">
                            <div class="card-container">
                                <div class="card card-flip">
                                    <div class="front card-block">
                                        <img class="card-img-top rounded-top" style="height: 200px; width: 100%;" src="@item.ImagePaths[0]" alt="Offer 1">
                                    </div>
                                    <div class="back card-block">
                                        <div class="card-body">
                                            <h5 class="card-title">@item.Name</h5>
                                            <p class="card-text">@item.Bio</p>
                                            <a class="btn btn-warning" asp-controller="posts" asp-action="Details" asp-route-id="@item.Id">SHOW</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <hr>
                    }
                </div>
            </div>
        </div>


    </div>




    @if (User.IsInRole("User"))
    {
    <a asp-controller="Posts" asp-action="Create">
            <button class="button_back" style="position:fixed !important; bottom:20px !important;right:20px !important;z-index:666 !important">
                <svg xmlns="http://www.w3.org/2000/svg" style="color:white" width="46" height="46" fill="currentColor" class="bi bi-plus svgIcon" viewBox="0 0 16 16">
                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                </svg>
            </button>

        </a>
    }

    <!-- Js Plugins -->
    <script src="offers/js/jquery-3.3.1.min.js"></script>
    <script src="offers/js/bootstrap.min.js"></script>
    <script src="offers/js/jquery.nice-select.min.js"></script>
    <script src="offers/js/jquery-ui.min.js"></script>
    <script src="offers/js/jquery.slicknav.js"></script>
    <script src="offers/js/mixitup.min.js"></script>
    <script src="offers/js/owl.carousel.min.js"></script>
    <script src="offers/js/main.js"></script>
    <script src="card/card.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    @* ads card script *@
    <script>
    $(document).ready(function() {
    var front = document.getElementsByClassName("front");
    var back = document.getElementsByClassName("back");

    var highest = 0;
    var absoluteSide = "";

    for (var i = 0; i < front.length; i++) {
    if (front[i].offsetHeight > back[i].offsetHeight) {
    if (front[i].offsetHeight > highest) {
    highest = front[i].offsetHeight;
    absoluteSide = ".front";
    }
    } else if (back[i].offsetHeight > highest) {
    highest = back[i].offsetHeight;
    absoluteSide = ".back";
    }
    }
    $(".front").css("height", highest);
    $(".back").css("height", highest);
    $(absoluteSide).css("position", "absolute");
    });
    </script>

    @* add to favorite *@
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            // Event delegation to handle dynamically added buttons
            $(document).on('click', '.add-to-favorites, .remove-from-favorites', function () {
                var button = $(this);
                var postId = button.data('postid');

                if (button.hasClass('remove-from-favorites')) {
                    removeFromFavorites(postId, button);
                } else {
                    addToFavorites(postId, button);
                }
            });

            function addToFavorites(postId, button) {
                button.prop('disabled', true); // Disable the button to prevent multiple clicks
                $.ajax({
                    url: '/Posts/AddToFavorites?postId=' + postId,
                    type: 'POST',
                    success: function (data) {
                        // Handle success, maybe show a success message
                        button.text('Remove from Favorites'); // Change button text
                        button.removeClass('add-to-favorites').addClass('remove-from-favorites'); // Change class
                        button.removeClass('btn btn-outline-primary').addClass('btn btn-outline-danger');

                        button.prop('disabled', false); // Re-enable the button
                    },
                    error: function (xhr, status, error) {
                        // Handle error, maybe show an error message
                        alert('Error adding item to favorites: ' + error);
                        button.prop('disabled', false); // Re-enable the button in case of error
                    }
                });
            }

            function removeFromFavorites(postId, button) {
                button.prop('disabled', true);
                $.ajax({
                    url: '/Posts/RemoveFromFavorites?id=' + postId,
                    type: 'POST',
                    success: function (data) {
                        // Handle success, maybe show a success message
                        button.text('Add to Favorites'); // Change button text
                        button.removeClass('remove-from-favorites').addClass('add-to-favorites'); // Change class
                        button.removeClass('btn btn-outline-danger').addClass('btn btn-outline-primary');
                        button.prop('disabled', false); // Re-enable the button
                    },
                    error: function (xhr, status, error) {
                        // Handle error, maybe show an error message
                        alert('Error removing item from favorites: ' + error);
                        button.prop('disabled', false); // Re-enable the button in case of error
                    }
                });
            }
        });
    </script>

    @* add and show comments *@
    <script>
        $(document).ready(function () {
            // Toggle comment input field visibility
            $(".toggle-comment").click(function () {
                var postId = $(this).data("postid");
                $("#commentInput_" + postId).toggleClass("d-none");
            });

            // Submit comment
            $(".submit-comment").click(function () {
                var postId = $(this).data("postid");
                // var commentId = $(this).data("commentid");
                var commentText = $("#commentInput_" + postId + " input[name='commentText']").val();

                // Make sure comment text is not empty
                if (commentText.trim() === "") {
                    alert("Please enter a comment.");
                    return;
                }
                // Send comment to the server for saving (optional)
                $.post("/Posts/AddComment", { postId: postId, commentText: commentText }, function () {
                    // Clear input field after successful submission
                    $("#commentInput_" + postId + " input[name='commentText']").val("");
                    // location.reload();
                });
                var commentId = $(this).data("commentid");
                // Add the comment to the DOM immediately
                var newCommentHtml = '<div class="card mt-2" style="width: 100%;">' +
                    '<div class="card-body">' +
                    '<div class="comment-text">' + commentText + '</div>' +
                    '<div class="comment-buttons">' +
                    '<button type="button" class="btn btn-primary edit-comment" data-commentid="' + postId + '">Edit</button>' +
                    '<button type="button" class="btn btn-danger delete-comment" data-commentid="' + postId + '">Delete</button>' +
                    '</div>' +
                    '</div>' +
                    '</div>';

                $("#AddComment_" + postId).append(newCommentHtml);

                // Update the comment count displayed on the button
                var button = $(".toggle-comment[data-postid='" + postId + "']");
                updateCommentCount(button);

            });

            // Click event handler for edit-comment button
            $(document).on("click", ".edit-comment", function () {
                var commentBody = $(this).closest(".card-body").find(".comment-text");
                var currentComment = commentBody.text().trim();
                var postId = $(this).data("commentid");

                // إخفاء زر التعديل
                $(this).hide();

                // عرض مدخل للتعليق للتعديل
                var commentInput = $('<input type="text" class="form-control edit-comment-input" value="' + currentComment + '">');
                commentBody.empty(); // حذف نص التعليق الحالي
                commentBody.append(commentInput);

                // زر لحفظ التعديلات
                var saveButton = $('<button type="button" class="btn btn-success save-edit">Save</button>');
                commentBody.append(saveButton);

                // تفاعل زر حفظ التعديلات
                saveButton.click(function () {
                    var newComment = commentInput.val();

                    // تحديث نص التعليق في الواجهة
                    commentBody.empty();
                    commentBody.text(newComment);

                    // إظهار زر التعديل مرة أخرى
                    $(".edit-comment[data-commentid='" + postId + "']").show();

                    // إرسال التعديل إلى الخادم باستخدام AJAX
                    $.ajax({
                        url: "/posts/EditComment/" + postId,
                        type: "POST",
                        data: { id: postId, newComment: newComment },
                        success: function (data) {
                            alert("done");
                        },
                        error: function (xhr, status, error) {
                        }
                    });
                });
            });



            // Click event handler for delete-comment button
            $(document).on("click", ".delete-comment", function () {
                var postId = $(this).data("commentid");
                var deleteButton = $(this); // الحفاظ على مرجع للزر الذي تم النقر عليه

                // Confirm deletion
                if (confirm("Are you sure you want to delete this comment?")) {
                    // Send request to server to delete the comment
                    $.ajax({
                        url: "/posts/DeleteComment/" + postId,
                        type: "POST",
                        success: function () {
                            // Optionally, update the comment count
                            var button = $("#Comment-btnbtn[data-postid='" + postId + "']");
                            updateCommentCountDelete(button);
                            // Remove the comment from the DOM
                            deleteButton.closest(".card").remove();
                        },
                        error: function (xhr, status, error) {
                            // Handle error response if needed
                            console.error("Error deleting comment:", error);
                        }
                    });
                }
            });

        });

        // Function to update the comment count displayed on the button
        function updateCommentCountDelete(button) {
            var currentCountDelete = parseInt(button.text().split(' ')[1]); // Extract current count from button text
            button.text('Comments ' + (currentCountDelete - 1)); // Decrement count and update button text
        };
        function updateCommentCount(button) {
            var currentCount = parseInt(button.text().split(' ')[1]); // Extract current count from button text
            button.text('Comments ' + (currentCount + 1)); // Increment count and update button text
        };
    </script>

    @* add and show Like *@
    <script>
        $(document).ready(function () {
            // Event delegation to handle dynamically added buttons
            $(document).on('click', '.add-to-Likes, .remove-from-Likes', function () {
                var button = $(this);
                var postId = button.data('postid');

                if (button.hasClass('remove-from-Likes')) {
                    removeFromLikes(postId, button);
                } else {
                    addToLikes(postId, button);
                }
            });

            function addToLikes(postId, button) {
                button.prop('disabled', true); // Disable the button to prevent multiple clicks
                $.ajax({
                    url: '/Posts/AddToLikes?postId=' + postId,
                    type: 'POST',
                    success: function (data) {
                        // Handle success, maybe show a success message
                        updateButton(button, true); // Update button text and count
                    },
                    error: function (xhr, status, error) {
                        // Handle error, maybe show an error message
                        alert('Error adding item to Likes: ' + error);
                        button.prop('disabled', false); // Re-enable the button in case of error
                    }
                });
            }

            function removeFromLikes(postId, button) {
                button.prop('disabled', true);
                $.ajax({
                    url: '/Posts/RemoveFromLikes?id=' + postId,
                    type: 'POST',
                    success: function (data) {
                        // Handle success, maybe show a success message
                        updateButton(button, false); // Update button text and count
                    },
                    error: function (xhr, status, error) {
                        // Handle error, maybe show an error message
                        alert('Error removing item from Likes: ' + error);
                        button.prop('disabled', false); // Re-enable the button in case of error
                    }
                });
            }

            function updateButton(button, isLiked) {
                var likeCountSpan = button.find('span');
                var currentText = likeCountSpan.text();
                var currentCount = parseInt(currentText.split(' ')[1]); // Extract current like count

                // Update button text and count based on like status
                if (isLiked) {
                    likeCountSpan.text('Liked ' + (currentCount + 1));
                    button.removeClass('add-to-Likes').addClass('remove-from-Likes');
                    button.removeClass('card_btns-comment').addClass('card_btns-fav');
                } else {
                    likeCountSpan.text('Like ' + (currentCount - 1));
                    button.removeClass('remove-from-Likes').addClass('add-to-Likes');
                    button.removeClass('card_btns-fav').addClass('card_btns-comment');
                }

                button.prop('disabled', false); // Re-enable the button
            }
        });
    </script>

</body>

</html>